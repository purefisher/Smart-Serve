{"ast":null,"code":"import React, { createContext, useContext } from 'react';\nimport { useForm } from '../use-form.js';\nfunction createFormContext() {\n  const FormContext = createContext(null);\n  function FormProvider(_ref) {\n    let {\n      form,\n      children\n    } = _ref;\n    return /* @__PURE__ */React.createElement(FormContext.Provider, {\n      value: form\n    }, children);\n  }\n  function useFormContext() {\n    const ctx = useContext(FormContext);\n    if (!ctx) {\n      throw new Error(\"useFormContext was called outside of FormProvider context\");\n    }\n    return ctx;\n  }\n  return [FormProvider, useFormContext, useForm];\n}\nexport { createFormContext };","map":{"version":3,"mappings":";;AAEO,SAASA,iBAAiB,GAAG;EAClC,MAAMC,WAAW,GAAGC,aAAa,CAAC,IAAI,CAAC;EACvC,SAASC,YAAY,OAAqB;IAAA,IAApB;MAAEC,IAAI;MAAEC;IAAQ,CAAE;IACtC,sBAAuBC,KAAK,CAACC,aAAa,CAACN,WAAW,CAACO,QAAQ,EAAE;MAC/DC,KAAK,EAAEL;IACb,CAAK,EAAEC,QAAQ,CAAC;EAChB;EACE,SAASK,cAAc,GAAG;IACxB,MAAMC,GAAG,GAAGC,UAAU,CAACX,WAAW,CAAC;IACnC,IAAI,CAACU,GAAG,EAAE;MACR,MAAM,IAAIE,KAAK,CAAC,2DAA2D,CAAC;IAClF;IACI,OAAOF,GAAG;EACd;EACE,OAAO,CAACR,YAAY,EAAEO,cAAc,EAAEI,OAAO,CAAC;AAChD","names":["createFormContext","FormContext","createContext","FormProvider","form","children","React","createElement","Provider","value","useFormContext","ctx","useContext","Error","useForm"],"sources":["C:\\Users\\dbedn\\Smart-Serve\\src\\react-web-app\\node_modules\\@mantine\\form\\src\\FormProvider\\FormProvider.tsx"],"sourcesContent":["import React, { createContext, useContext } from 'react';\nimport { useForm } from '../use-form';\nimport { UseFormReturnType, UseForm, _TransformValues } from '../types';\n\nexport interface FormProviderProps<Form> {\n  form: Form;\n  children: React.ReactNode;\n}\n\nexport function createFormContext<\n  Values,\n  TransformValues extends _TransformValues<Values> = (values: Values) => Values\n>() {\n  type Form = UseFormReturnType<Values, TransformValues>;\n\n  const FormContext = createContext<Form>(null);\n\n  function FormProvider({ form, children }: FormProviderProps<Form>) {\n    return <FormContext.Provider value={form}>{children}</FormContext.Provider>;\n  }\n\n  function useFormContext() {\n    const ctx = useContext(FormContext);\n    if (!ctx) {\n      throw new Error('useFormContext was called outside of FormProvider context');\n    }\n\n    return ctx;\n  }\n\n  return [FormProvider, useFormContext, useForm] as [\n    React.FC<FormProviderProps<Form>>,\n    () => Form,\n    UseForm<Values, TransformValues>\n  ];\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}